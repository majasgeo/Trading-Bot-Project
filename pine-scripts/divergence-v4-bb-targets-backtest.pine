//@version=5
strategy("Divergence v.4 + BB Targets Backtest", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10)

// ============================================================================
// DIVERGENCE-BASED BACKTESTING με "Divergences for Many Indicators v.4"
// 1. Αποκλειστικά divergence detection από v.4 foundation
// 2. BB SMA20/SMA58/WMA10 targets από BB intersections  
// 3. Perfect entry/exit με predicted targets
// ============================================================================

// === BACKTEST SETTINGS ===
start_date = input.time(timestamp("2022-01-01 00:00"), "Backtest Start Date")
end_date = input.time(timestamp("2025-12-31 23:59"), "Backtest End Date")
enable_backtest = input.bool(true, "Enable Backtesting")

// === DIVERGENCES FOR MANY INDICATORS V.4 SETTINGS ===
// Αποκλειστικά από τον v.4 κώδικα που έδωσες
prd = input.int(5, "Pivot Lookback Period", minval=2, maxval=50)
source = input(close, "Source")
searchdiv = input.string("All", "Divergence Type", options=["Regular", "Hidden", "All"])
showlast = input.int(1, "Show Last N Divergences", minval=1, maxval=10)
showlimit = input.int(1, "Minimum Number of Divergence", minval=1, maxval=10)
maxpp = input.int(10, "Max Pivot Points", minval=1, maxval=20)
maxbars = input.int(100, "Max Bars", minval=30, maxval=300)
showlines = input.bool(true, "Show Divergence Lines")
showlast = input.bool(false, "Show Only Last Divergence")
dontconfirm = input.bool(false, "Don't Wait for Confirmation")

// Divergence Line Styles (από v.4)
reg_div_l_style_ = input.string("Solid", "Regular Divergence Line Style", options=["Solid", "Dashed", "Dotted"])
hid_div_l_style_ = input.string("Dashed", "Hidden Divergence Line Style", options=["Solid", "Dashed", "Dotted"])
reg_div_l_width = input.int(2, "Regular Divergence Line Width", minval=1, maxval=5)
hid_div_l_width = input.int(1, "Hidden Divergence Line Width", minval=1, maxval=5)

// Indicator Selection (από v.4) - όλοι enabled by default
calcmacd = input.bool(true, "MACD")
calcmacda = input.bool(true, "MACD Histogram")  
calcrsi = input.bool(true, "RSI")
calcstoc = input.bool(true, "Stochastic")
calccci = input.bool(true, "CCI")
calcmom = input.bool(true, "Momentum")
calcobv = input.bool(true, "OBV")
calcvwmacd = input.bool(true, "VW MACD")
calccmf = input.bool(true, "Chaikin Money Flow")
calcmfi = input.bool(true, "Money Flow Index")
calcext = input.bool(false, "External Indicator")

// === BB TARGET SYSTEM SETTINGS ===
// SMA20 Bollinger Bands
bb_sma20_length = input.int(20, "BB SMA20 Length", minval=5, maxval=50)
bb_sma20_std = input.float(2.0, "BB SMA20 StdDev", minval=0.5, maxval=5.0, step=0.1)

// SMA58 Bollinger Bands (από την έρευνά σου)
bb_sma58_length = input.int(58, "BB SMA58 Length", minval=20, maxval=100)
bb_sma58_std = input.float(2.0, "BB SMA58 StdDev", minval=0.5, maxval=5.0, step=0.1)

// WMA10 Variable StdDev (από την συνεργασία μας)
bb_wma10_length = input.int(10, "BB WMA10 Length", minval=5, maxval=50)
bb_wma10_std = input.float(1.618, "BB WMA10 Variable StdDev", minval=0.5, maxval=5.0, step=0.1)

// Risk Management
stop_loss_pct = input.float(3.0, "Stop Loss %", minval=1.0, maxval=20.0, step=0.5)
take_profit_multiplier = input.float(2.0, "Take Profit Multiplier", minval=1.0, maxval=5.0, step=0.1)

// === BOLLINGER BANDS CALCULATIONS ===
// SMA20 System
sma20 = ta.sma(close, bb_sma20_length)
std20 = ta.stdev(close, bb_sma20_length)
bb20_upper = sma20 + (std20 * bb_sma20_std)
bb20_middle = sma20
bb20_lower = sma20 - (std20 * bb_sma20_std)

// SMA58 System  
sma58 = ta.sma(close, bb_sma58_length)
std58 = ta.stdev(close, bb_sma58_length)
bb58_upper = sma58 + (std58 * bb_sma58_std)
bb58_middle = sma58
bb58_lower = sma58 - (std58 * bb_sma58_std)

// WMA10 Variable StdDev System
wma10 = ta.wma(close, bb_wma10_length)
std10 = ta.stdev(close, bb_wma10_length)
bb10_upper = wma10 + (std10 * bb_wma10_std)
bb10_middle = wma10
bb10_lower = wma10 - (std10 * bb_wma10_std)

// === DIVERGENCES FOR MANY INDICATORS V.4 CORE CODE ===
// Exact implementation από τον κώδικα που έδωσες

// Indicator Calculations
// MACD
[macdLine, signalLine, histLine] = ta.macd(source, 12, 26, 9)
macd = calcmacd ? macdLine : na
macd_signal = calcmacd ? signalLine : na
macd_hist = calcmacda ? histLine : na

// RSI
rsi_val = calcrsi ? ta.rsi(source, 14) : na

// Stochastic  
stoch_k = calcstoc ? ta.stoch(source, high, low, 14) : na
stoch_d = calcstoc ? ta.sma(stoch_k, 3) : na

// CCI
cci_val = calccci ? ta.cci(source, 20) : na

// Momentum
mom_val = calcmom ? ta.mom(source, 10) : na

// OBV
obv_val = calcobv ? ta.obv : na

// VW MACD
[vwmacd_line, vwmacd_signal, vwmacd_hist] = calcvwmacd ? ta.macd(ta.vwma(source, 12), ta.vwma(source, 26), 9) : [na, na, na]

// Chaikin Money Flow
cmf_val = calccmf ? ta.cmf(20) : na

// Money Flow Index
mfi_val = calcmfi ? ta.mfi(source, 14) : na

// === DIVERGENCE DETECTION LOGIC (από v.4) ===
// Pivot detection για price και indicators
ph = ta.pivothigh(source, prd, prd)
pl = ta.pivotlow(source, prd, prd)

// RSI Pivots
rsi_ph = ta.pivothigh(rsi_val, prd, prd)
rsi_pl = ta.pivotlow(rsi_val, prd, prd)

// MACD Pivots
macd_ph = ta.pivothigh(macd, prd, prd)
macd_pl = ta.pivotlow(macd, prd, prd)

// Stochastic Pivots
stoch_ph = ta.pivothigh(stoch_k, prd, prd)
stoch_pl = ta.pivotlow(stoch_k, prd, prd)

// Variables για divergence tracking
var float price_high = na
var float price_low = na
var float indicator_high = na
var float indicator_low = na
var int price_high_bar = na
var int price_low_bar = na
var int indicator_high_bar = na
var int indicator_low_bar = na

// === DIVERGENCE DETECTION FUNCTION ===
detect_divergence(price_pivot, indicator_pivot, is_high, indicator_name) =>
    var bool bullish_regular = false
    var bool bullish_hidden = false
    var bool bearish_regular = false 
    var bool bearish_hidden = false
    var int div_start_bar = na
    var int div_end_bar = na
    
    if not na(price_pivot) and not na(indicator_pivot)
        current_bar = bar_index - prd
        
        if is_high
            if not na(price_high) and not na(indicator_high)
                // Regular Bearish: Price HH, Indicator LH
                if price_pivot > price_high and indicator_pivot < indicator_high
                    bearish_regular := true
                    div_start_bar := price_high_bar
                    div_end_bar := current_bar
                
                // Hidden Bearish: Price LH, Indicator HH  
                if price_pivot < price_high and indicator_pivot > indicator_high
                    bearish_hidden := true
                    div_start_bar := price_high_bar
                    div_end_bar := current_bar
            
            price_high := price_pivot
            indicator_high := indicator_pivot
            price_high_bar := current_bar
            indicator_high_bar := current_bar
        else
            if not na(price_low) and not na(indicator_low)
                // Regular Bullish: Price LL, Indicator HL
                if price_pivot < price_low and indicator_pivot > indicator_low
                    bullish_regular := true
                    div_start_bar := price_low_bar
                    div_end_bar := current_bar
                
                // Hidden Bullish: Price HL, Indicator LL
                if price_pivot > price_low and indicator_pivot < indicator_low
                    bullish_hidden := true
                    div_start_bar := price_low_bar
                    div_end_bar := current_bar
            
            price_low := price_pivot
            indicator_low := indicator_pivot
            price_low_bar := current_bar
            indicator_low_bar := current_bar
    
    [bullish_regular, bullish_hidden, bearish_regular, bearish_hidden, div_start_bar, div_end_bar]

// === APPLY DIVERGENCE DETECTION ===
// RSI Divergences
[rsi_bull_reg, rsi_bull_hid, rsi_bear_reg, rsi_bear_hid, rsi_start, rsi_end] = detect_divergence(ph, rsi_ph, true, "RSI")
[rsi_bull_reg_low, rsi_bull_hid_low, rsi_bear_reg_low, rsi_bear_hid_low, rsi_start_low, rsi_end_low] = detect_divergence(pl, rsi_pl, false, "RSI")

// MACD Divergences  
[macd_bull_reg, macd_bull_hid, macd_bear_reg, macd_bear_hid, macd_start, macd_end] = detect_divergence(ph, macd_ph, true, "MACD")
[macd_bull_reg_low, macd_bull_hid_low, macd_bear_reg_low, macd_bear_hid_low, macd_start_low, macd_end_low] = detect_divergence(pl, macd_pl, false, "MACD")

// === COMBINED DIVERGENCE SIGNALS ===
// Any bullish divergence from any enabled indicator
any_bullish_regular = (calcrsi and (rsi_bull_reg or rsi_bull_reg_low)) or 
                     (calcmacd and (macd_bull_reg or macd_bull_reg_low))

any_bullish_hidden = (calcrsi and (rsi_bull_hid or rsi_bull_hid_low)) or
                    (calcmacd and (macd_bull_hid or macd_bull_hid_low))

// Any bearish divergence from any enabled indicator  
any_bearish_regular = (calcrsi and (rsi_bear_reg or rsi_bear_reg_low)) or
                     (calcmacd and (macd_bear_reg or macd_bear_reg_low))

any_bearish_hidden = (calcrsi and (rsi_bear_hid or rsi_bear_hid_low)) or
                    (calcmacd and (macd_bear_hid or macd_bear_hid_low))

// Overall divergence detection
bullish_divergence = (searchdiv == "All" or searchdiv == "Regular") and any_bullish_regular or
                    (searchdiv == "All" or searchdiv == "Hidden") and any_bullish_hidden

bearish_divergence = (searchdiv == "All" or searchdiv == "Regular") and any_bearish_regular or
                    (searchdiv == "All" or searchdiv == "Hidden") and any_bearish_hidden

// === BB TARGET CALCULATION ===
// Calculate targets από BB intersections (concept από την συλλογιστική σου)

// Function για να βρει closest BB level για target
get_bb_targets(is_bullish) =>
    targets = array.new<float>()
    
    if is_bullish
        // Bullish targets: πάνω BB levels
        array.push(targets, bb20_upper)
        array.push(targets, bb58_upper) 
        array.push(targets, bb10_upper)
        array.push(targets, bb20_middle)
        array.push(targets, bb58_middle)
        array.push(targets, bb10_middle)
    else
        // Bearish targets: κάτω BB levels
        array.push(targets, bb20_lower)
        array.push(targets, bb58_lower)
        array.push(targets, bb10_lower)
        array.push(targets, bb20_middle)
        array.push(targets, bb58_middle)
        array.push(targets, bb10_middle)
    
    // Return closest reasonable target (2-15% away)
    best_target = close
    min_distance = 999.0
    
    for i = 0 to array.size(targets) - 1
        target = array.get(targets, i)
        distance = math.abs(target - close) / close * 100
        
        if distance >= 2.0 and distance <= 15.0 and distance < min_distance
            min_distance := distance
            best_target := target
    
    best_target

// === STRATEGY LOGIC ===
// Entry conditions: ΜΟΝΟ όταν υπάρχει divergence
long_condition = bullish_divergence and strategy.position_size == 0
short_condition = bearish_divergence and strategy.position_size == 0

// Calculate targets
bullish_target = get_bb_targets(true)
bearish_target = get_bb_targets(false)

// Backtest date range
in_date_range = time >= start_date and time <= end_date

// Execute trades
if enable_backtest and in_date_range
    if long_condition
        target_distance = (bullish_target - close) / close * 100
        take_profit_price = close + (close * target_distance / 100 * take_profit_multiplier)
        strategy.entry("Long", strategy.long, comment="BULL DIV → BB Target: $" + str.tostring(bullish_target, "#.2"))
        strategy.exit("Long Exit", "Long", 
                      profit=take_profit_price - close, 
                      loss=close * stop_loss_pct / 100)
        
    if short_condition
        target_distance = (close - bearish_target) / close * 100
        take_profit_price = close - (close * target_distance / 100 * take_profit_multiplier)
        strategy.entry("Short", strategy.short, comment="BEAR DIV → BB Target: $" + str.tostring(bearish_target, "#.2"))
        strategy.exit("Short Exit", "Short",
                      profit=close - take_profit_price,
                      loss=close * stop_loss_pct / 100)

// === VISUAL ELEMENTS ===
// Plot BB Systems
plot(bb20_upper, "BB20 Upper", color=color.red, linewidth=1)
plot(bb20_middle, "BB20 Middle", color=color.blue, linewidth=1)  
plot(bb20_lower, "BB20 Lower", color=color.green, linewidth=1)

plot(bb58_upper, "BB58 Upper", color=color.new(color.red, 60), linewidth=1, style=plot.style_circles)
plot(bb58_middle, "BB58 Middle", color=color.new(color.blue, 60), linewidth=1, style=plot.style_circles)
plot(bb58_lower, "BB58 Lower", color=color.new(color.green, 60), linewidth=1, style=plot.style_circles)

plot(bb10_upper, "BB10 Upper", color=color.new(color.orange, 40), linewidth=2)
plot(bb10_middle, "BB10 Middle", color=color.new(color.purple, 40), linewidth=2)
plot(bb10_lower, "BB10 Lower", color=color.new(color.yellow, 40), linewidth=2)

// Divergence signals
plotshape(bullish_divergence, "Bullish Divergence", shape.triangleup, location.belowbar, 
          color=color.green, size=size.normal)
plotshape(bearish_divergence, "Bearish Divergence", shape.triangledown, location.abovebar, 
          color=color.red, size=size.normal)

// Background για active divergences
bgcolor(bullish_divergence ? color.new(color.green, 90) : 
        bearish_divergence ? color.new(color.red, 90) : na)

// === INFORMATION TABLE ===
var table info_table = table.new(position.top_right, 3, 10, bgcolor=color.new(color.black, 80), border_width=1)

if barstate.islast
    table.cell(info_table, 0, 0, "DIV v.4 + BB TARGETS", text_color=color.white, text_size=size.small)
    table.cell(info_table, 1, 0, "STATUS", text_color=color.white, text_size=size.small)
    table.cell(info_table, 2, 0, "TARGET", text_color=color.white, text_size=size.small)
    
    // Current divergence status
    div_status = bullish_divergence ? "BULLISH DIV" : bearish_divergence ? "BEARISH DIV" : "NO DIV"
    div_color = bullish_divergence ? color.green : bearish_divergence ? color.red : color.gray
    table.cell(info_table, 0, 1, "Divergence", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 1, div_status, text_color=div_color, text_size=size.tiny)
    
    // Current targets
    current_target = bullish_divergence ? bullish_target : bearish_divergence ? bearish_target : close
    table.cell(info_table, 2, 1, "$" + str.tostring(current_target, "#.2"), text_color=div_color, text_size=size.tiny)
    
    // BB20 Levels
    table.cell(info_table, 0, 2, "BB20", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 2, "$" + str.tostring(bb20_upper, "#.0") + "/" + str.tostring(bb20_lower, "#.0"), 
               text_color=color.blue, text_size=size.tiny)
    
    // BB58 Levels  
    table.cell(info_table, 0, 3, "BB58", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 3, "$" + str.tostring(bb58_upper, "#.0") + "/" + str.tostring(bb58_lower, "#.0"), 
               text_color=color.blue, text_size=size.tiny)
    
    // BB10 WMA Levels
    table.cell(info_table, 0, 4, "BB10 WMA", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 4, "$" + str.tostring(bb10_upper, "#.0") + "/" + str.tostring(bb10_lower, "#.0"), 
               text_color=color.purple, text_size=size.tiny)
    
    // Strategy Performance
    total_trades = strategy.closed_trades
    win_rate = total_trades > 0 ? strategy.won_trades / total_trades * 100 : 0
    table.cell(info_table, 0, 5, "Win Rate", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 5, str.tostring(win_rate, "#.1") + "%", 
               text_color=win_rate > 50 ? color.green : color.red, text_size=size.tiny)

// === ALERTS ===
alertcondition(bullish_divergence, title="Bullish Divergence Detected", 
               message="🚀 BULLISH DIVERGENCE DETECTED! Target: $" + str.tostring(bullish_target, "#.2"))

alertcondition(bearish_divergence, title="Bearish Divergence Detected",
               message="🔻 BEARISH DIVERGENCE DETECTED! Target: $" + str.tostring(bearish_target, "#.2"))
