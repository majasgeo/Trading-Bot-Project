//@version=5
strategy("COMPLETE: Divergences v.4 + Extended Fibonacci + BB Targets", overlay=true, default_qty_type=strategy.percent_of_equity, default_qty_value=10, max_lines_count=500, max_labels_count=500)

// ============================================================================
// ΟΛΟΚΛΗΡΩΜΕΝΟΣ ΑΛΓΟΡΙΘΜΟΣ - ΣΩΣΤΟ ΑΠΟΤΕΛΕΣΜΑ
// 1. Divergences for Many Indicators v.4 (ΒΑΣΗ ΜΕΛΕΤΗΣ)
// 2. Extended Fibonacci Extensions (12 levels)
// 3. BB SMA20/SMA58/WMA10 Target System (ΠΡΟΒΛΕΨΗ ΣΤΟΧΩΝ)
// 4. Mathematical Constants Integration (Golden Ratio, Pi)
// 5. Nuclear Confluence Scoring System
// ============================================================================

// === BACKTEST SETTINGS ===
start_date = input.time(timestamp("2022-01-01 00:00"), "Backtest Start Date")
end_date = input.time(timestamp("2025-12-31 23:59"), "Backtest End Date")
enable_backtest = input.bool(true, "Enable Backtesting")

// === DIVERGENCES FOR MANY INDICATORS V.4 SETTINGS ===
group_div = "🔥 DIVERGENCES v.4 (FOUNDATION)"
prd = input.int(5, "Pivot Lookback Period", minval=2, maxval=50, group=group_div)
source = input(close, "Source", group=group_div)
searchdiv = input.string("All", "Divergence Type", options=["Regular", "Hidden", "All"], group=group_div)
showlast = input.int(1, "Show Last N Divergences", minval=1, maxval=10, group=group_div)
showlimit = input.int(1, "Minimum Number of Divergence", minval=1, maxval=10, group=group_div)
maxpp = input.int(10, "Max Pivot Points", minval=1, maxval=20, group=group_div)
maxbars = input.int(100, "Max Bars", minval=30, maxval=300, group=group_div)

// Indicator Selection (από v.4)
calcmacd = input.bool(true, "MACD", group=group_div)
calcmacda = input.bool(true, "MACD Histogram", group=group_div)
calcrsi = input.bool(true, "RSI", group=group_div)
calcstoc = input.bool(true, "Stochastic", group=group_div)
calccci = input.bool(true, "CCI", group=group_div)
calcmom = input.bool(true, "Momentum", group=group_div)
calcobv = input.bool(true, "OBV", group=group_div)
calcvwmacd = input.bool(true, "VW MACD", group=group_div)
calccmf = input.bool(true, "Chaikin Money Flow", group=group_div)
calcmfi = input.bool(true, "Money Flow Index", group=group_div)

// === EXTENDED FIBONACCI SETTINGS ===
group_fib = "📊 EXTENDED FIBONACCI"
fib_lookback = input.int(15, "Fibonacci Lookback Period", minval=5, maxval=50, group=group_fib)
show_fib_extensions = input.bool(true, "Show Fibonacci Extensions", group=group_fib)
show_fib_labels = input.bool(true, "Show Fibonacci Price Labels", group=group_fib)

// === BOLLINGER BANDS TARGET SYSTEM ===
group_bb = "🎯 BOLLINGER BANDS TARGET SYSTEM"
// SMA20 System
bb_sma20_length = input.int(20, "BB SMA20 Length", minval=5, maxval=50, group=group_bb)
bb_sma20_std = input.float(2.0, "BB SMA20 StdDev", minval=0.5, maxval=5.0, step=0.1, group=group_bb)

// SMA58 System (από την έρευνά σου)
bb_sma58_length = input.int(58, "BB SMA58 Length", minval=20, maxval=100, group=group_bb)
bb_sma58_std = input.float(2.0, "BB SMA58 StdDev", minval=0.5, maxval=5.0, step=0.1, group=group_bb)

// WMA10 Variable StdDev (από την συνεργασία μας)
bb_wma10_length = input.int(10, "BB WMA10 Length", minval=5, maxval=50, group=group_bb)
bb_wma10_std = input.float(1.618, "BB WMA10 Variable StdDev (Golden Ratio)", minval=0.5, maxval=5.0, step=0.1, group=group_bb)

// === CONFLUENCE & RISK SETTINGS ===
group_risk = "⚡ CONFLUENCE & RISK MANAGEMENT"
min_confluence_score = input.int(6, "Minimum Confluence Score (Nuclear ≥8)", minval=1, maxval=10, group=group_risk)
stop_loss_pct = input.float(3.0, "Stop Loss %", minval=1.0, maxval=20.0, step=0.5, group=group_risk)
use_fib_targets = input.bool(true, "Use Fibonacci Target Exits", group=group_risk)
use_bb_targets = input.bool(true, "Use BB Target Exits", group=group_risk)

// === MATHEMATICAL CONSTANTS (από Chat 11) ===
golden_ratio = 1.618033988749
pi_constant = 3.141592653589
math_multiplier_golden = golden_ratio - 0.26      // ≈ 1.358 (99.99% accuracy)
math_multiplier_pi = pi_constant - 0.0196         // ≈ 3.122 (99.99% accuracy)

// === EXTENDED FIBONACCI LEVELS ===
fib_levels = array.from(0.236, 0.382, 0.5, 0.618, 0.786, 1.0, 1.272, 1.618, 2.0, 2.618, 3.618, 4.236)
fib_colors = array.from(color.yellow, color.orange, color.blue, color.red, color.purple, color.white, 
                        color.green, color.maroon, color.navy, color.olive, color.teal, color.silver)

// === BOLLINGER BANDS CALCULATIONS ===
// SMA20 System
sma20 = ta.sma(close, bb_sma20_length)
std20 = ta.stdev(close, bb_sma20_length)
bb20_upper = sma20 + (std20 * bb_sma20_std)
bb20_middle = sma20
bb20_lower = sma20 - (std20 * bb_sma20_std)

// SMA58 System
sma58 = ta.sma(close, bb_sma58_length)
std58 = ta.stdev(close, bb_sma58_length)
bb58_upper = sma58 + (std58 * bb_sma58_std)
bb58_middle = sma58
bb58_lower = sma58 - (std58 * bb_sma58_std)

// WMA10 Variable StdDev System
wma10 = ta.wma(close, bb_wma10_length)
std10 = ta.stdev(close, bb_wma10_length)
bb10_upper = wma10 + (std10 * bb_wma10_std)
bb10_middle = wma10
bb10_lower = wma10 - (std10 * bb_wma10_std)

// Mathematical Constants Bollinger Bands
bb_golden = wma10 - (std10 * math_multiplier_golden)
bb_pi = wma10 + (std10 * math_multiplier_pi)

// === FIBONACCI SWING DETECTION ===
swing_high = ta.pivothigh(high, fib_lookback, fib_lookback)
swing_low = ta.pivotlow(low, fib_lookback, fib_lookback)

var float last_swing_high = na
var float last_swing_low = na
var int last_high_bar = na
var int last_low_bar = na

if not na(swing_high)
    last_swing_high := swing_high
    last_high_bar := bar_index - fib_lookback

if not na(swing_low)
    last_swing_low := swing_low
    last_low_bar := bar_index - fib_lookback

// === EXTENDED FIBONACCI CALCULATION ===
var line[] fib_lines = array.new<line>()
var label[] fib_labels = array.new<label>()

// Function για καθαρισμό παλιών Fibonacci elements
clear_fibonacci_elements() =>
    for i = 0 to array.size(fib_lines) - 1
        line.delete(array.get(fib_lines, i))
    array.clear(fib_lines)
    
    for i = 0 to array.size(fib_labels) - 1
        label.delete(array.get(fib_labels, i))
    array.clear(fib_labels)

// Fibonacci Extensions Calculation
var float[] current_fib_levels = array.new<float>()

if not na(last_swing_high) and not na(last_swing_low) and show_fib_extensions
    clear_fibonacci_elements()
    array.clear(current_fib_levels)
    
    fib_range = last_swing_high - last_swing_low
    is_bullish_fib = last_low_bar > last_high_bar
    
    for i = 0 to array.size(fib_levels) - 1
        level = array.get(fib_levels, i)
        fib_color = array.get(fib_colors, i)
        
        fib_price = 0.0
        if is_bullish_fib
            fib_price := last_swing_low + (fib_range * level)
        else
            fib_price := last_swing_high - (fib_range * level)
        
        array.push(current_fib_levels, fib_price)
        
        // Create Fibonacci line
        fib_line = line.new(bar_index - 50, fib_price, bar_index + 10, fib_price, 
                           color=fib_color, style=line.style_dashed, width=1)
        array.push(fib_lines, fib_line)
        
        // Create price label
        if show_fib_labels
            label_text = str.tostring(level * 100, "#.1") + "% - $" + str.tostring(fib_price, "#.2")
            fib_label = label.new(bar_index + 5, fib_price, label_text, 
                                 color=fib_color, textcolor=color.white, size=size.tiny)
            array.push(fib_labels, fib_label)

// === DIVERGENCES v.4 CORE DETECTION ===
// Indicator Calculations
[macdLine, signalLine, histLine] = ta.macd(source, 12, 26, 9)
macd = calcmacd ? macdLine : na
macd_signal = calcmacd ? signalLine : na
macd_hist = calcmacda ? histLine : na

rsi_val = calcrsi ? ta.rsi(source, 14) : na
stoch_k = calcstoc ? ta.stoch(source, high, low, 14) : na
stoch_d = calcstoc ? ta.sma(stoch_k, 3) : na
cci_val = calccci ? ta.cci(source, 20) : na
mom_val = calcmom ? ta.mom(source, 10) : na
obv_val = calcobv ? ta.obv : na

[vwmacd_line, vwmacd_signal, vwmacd_hist] = calcvwmacd ? ta.macd(ta.vwma(source, 12), ta.vwma(source, 26), 9) : [na, na, na]
cmf_val = calccmf ? ta.cmf(20) : na
mfi_val = calcmfi ? ta.mfi(source, 14) : na

// Pivot detection για price και indicators
ph = ta.pivothigh(source, prd, prd)
pl = ta.pivotlow(source, prd, prd)

// RSI Pivots
rsi_ph = ta.pivothigh(rsi_val, prd, prd)
rsi_pl = ta.pivotlow(rsi_val, prd, prd)

// MACD Pivots
macd_ph = ta.pivothigh(macd, prd, prd)
macd_pl = ta.pivotlow(macd, prd, prd)

// === DIVERGENCE DETECTION FUNCTION ===
detect_divergence(price_pivot_high, price_pivot_low, ind_pivot_high, ind_pivot_low) =>
    var float last_price_high = na
    var float last_price_low = na
    var float last_ind_high = na
    var float last_ind_low = na
    var int last_price_high_bar = na
    var int last_price_low_bar = na
    
    bullish_regular = false
    bullish_hidden = false
    bearish_regular = false
    bearish_hidden = false
    
    // Bearish Divergences (Highs)
    if not na(price_pivot_high) and not na(ind_pivot_high)
        current_bar = bar_index - prd
        if not na(last_price_high) and not na(last_ind_high)
            // Regular Bearish: Price HH, Indicator LH
            if price_pivot_high > last_price_high and ind_pivot_high < last_ind_high
                bearish_regular := true
            // Hidden Bearish: Price LH, Indicator HH
            if price_pivot_high < last_price_high and ind_pivot_high > last_ind_high
                bearish_hidden := true
        
        last_price_high := price_pivot_high
        last_ind_high := ind_pivot_high
        last_price_high_bar := current_bar
    
    // Bullish Divergences (Lows)
    if not na(price_pivot_low) and not na(ind_pivot_low)
        current_bar = bar_index - prd
        if not na(last_price_low) and not na(last_ind_low)
            // Regular Bullish: Price LL, Indicator HL
            if price_pivot_low < last_price_low and ind_pivot_low > last_ind_low
                bullish_regular := true
            // Hidden Bullish: Price HL, Indicator LL
            if price_pivot_low > last_price_low and ind_pivot_low < last_ind_low
                bullish_hidden := true
        
        last_price_low := price_pivot_low
        last_ind_low := ind_pivot_low
        last_price_low_bar := current_bar
    
    [bullish_regular, bullish_hidden, bearish_regular, bearish_hidden]

// Apply divergence detection για multiple indicators
[rsi_bull_reg, rsi_bull_hid, rsi_bear_reg, rsi_bear_hid] = detect_divergence(ph, pl, rsi_ph, rsi_pl)
[macd_bull_reg, macd_bull_hid, macd_bear_reg, macd_bear_hid] = detect_divergence(ph, pl, macd_ph, macd_pl)

// Combined divergence signals
any_bullish_regular = (calcrsi and rsi_bull_reg) or (calcmacd and macd_bull_reg)
any_bullish_hidden = (calcrsi and rsi_bull_hid) or (calcmacd and macd_bull_hid)
any_bearish_regular = (calcrsi and rsi_bear_reg) or (calcmacd and macd_bear_reg)
any_bearish_hidden = (calcrsi and rsi_bear_hid) or (calcmacd and macd_bear_hid)

// Overall divergence detection
bullish_divergence = (searchdiv == "All" or searchdiv == "Regular") and any_bullish_regular or
                    (searchdiv == "All" or searchdiv == "Hidden") and any_bullish_hidden

bearish_divergence = (searchdiv == "All" or searchdiv == "Regular") and any_bearish_regular or
                    (searchdiv == "All" or searchdiv == "Hidden") and any_bearish_hidden

// === CONFLUENCE SCORING SYSTEM ===
confluence_score = 0

// +3 points: Divergence detected (ΒΑΣΗ ΜΕΛΕΤΗΣ)
if bullish_divergence or bearish_divergence
    confluence_score += 3

// +2 points: Fibonacci confluence
fib_confluence = false
if array.size(current_fib_levels) > 0
    for i = 0 to array.size(current_fib_levels) - 1
        fib_level = array.get(current_fib_levels, i)
        if math.abs(close - fib_level) / close * 100 < 2.0
            fib_confluence := true
            confluence_score += 2
            break

// +3 points: Bollinger Band confluence
bb_confluence = false
bb_extreme_proximity = close <= bb20_lower or close >= bb20_upper or
                      close <= bb58_lower or close >= bb58_upper or
                      close <= bb10_lower or close >= bb10_upper

if bb_extreme_proximity
    bb_confluence := true
    confluence_score += 3

// +1 point: BB middle proximity
bb_middle_proximity = math.abs(close - bb20_middle) / close * 100 < 1.0 or
                     math.abs(close - bb58_middle) / close * 100 < 1.0 or
                     math.abs(close - bb10_middle) / close * 100 < 1.0

if bb_middle_proximity
    confluence_score += 1

// +2 points: Mathematical constants proximity
math_confluence = false
if math.abs(close - bb_golden) / close * 100 < 1.5 or math.abs(close - bb_pi) / close * 100 < 1.5
    math_confluence := true
    confluence_score += 2

// Nuclear signal detection
nuclear_signal = confluence_score >= 8

// === TARGET CALCULATION ===
get_targets(is_bullish) =>
    targets = array.new<float>()
    
    // BB Targets
    if use_bb_targets
        if is_bullish
            array.push(targets, bb20_upper)
            array.push(targets, bb58_upper)
            array.push(targets, bb10_upper)
            array.push(targets, bb_pi)  // Mathematical constant target
        else
            array.push(targets, bb20_lower)
            array.push(targets, bb58_lower)
            array.push(targets, bb10_lower)
            array.push(targets, bb_golden)  // Mathematical constant target
    
    // Fibonacci Targets
    if use_fib_targets and array.size(current_fib_levels) > 0
        for i = 0 to array.size(current_fib_levels) - 1
            fib_level = array.get(current_fib_levels, i)
            target_distance = math.abs(fib_level - close) / close * 100
            
            if target_distance >= 2.0 and target_distance <= 20.0
                if is_bullish and fib_level > close
                    array.push(targets, fib_level)
                else if not is_bullish and fib_level < close
                    array.push(targets, fib_level)
    
    // Return closest reasonable target
    best_target = close
    min_distance = 999.0
    
    for i = 0 to array.size(targets) - 1
        target = array.get(targets, i)
        distance = math.abs(target - close) / close * 100
        
        if distance >= 2.0 and distance <= 25.0 and distance < min_distance
            min_distance := distance
            best_target := target
    
    best_target

// === STRATEGY EXECUTION ===
// Entry conditions: Divergence + Minimum Confluence
long_condition = bullish_divergence and confluence_score >= min_confluence_score and strategy.position_size == 0
short_condition = bearish_divergence and confluence_score >= min_confluence_score and strategy.position_size == 0

// Calculate targets
bullish_target = get_targets(true)
bearish_target = get_targets(false)

// Backtest date range
in_date_range = time >= start_date and time <= end_date

// Execute trades
if enable_backtest and in_date_range
    if long_condition
        target_distance = (bullish_target - close) / close * 100
        strategy.entry("Long", strategy.long, 
                      comment="🚀 BULL DIV+FIB+BB " + str.tostring(confluence_score) + "/10")
        strategy.exit("Long Exit", "Long", 
                      limit=bullish_target,
                      stop=close * (1 - stop_loss_pct / 100))
        
    if short_condition
        target_distance = (close - bearish_target) / close * 100
        strategy.entry("Short", strategy.short, 
                      comment="🔻 BEAR DIV+FIB+BB " + str.tostring(confluence_score) + "/10")
        strategy.exit("Short Exit", "Short",
                      limit=bearish_target,
                      stop=close * (1 + stop_loss_pct / 100))

// === VISUAL DISPLAY ===
// Plot Bollinger Bands
plot(bb20_upper, "BB20 Upper", color=color.red, linewidth=1)
plot(bb20_middle, "BB20 Middle", color=color.blue, linewidth=1)
plot(bb20_lower, "BB20 Lower", color=color.green, linewidth=1)

plot(bb58_upper, "BB58 Upper", color=color.new(color.red, 60), linewidth=1, style=plot.style_circles)
plot(bb58_middle, "BB58 Middle", color=color.new(color.blue, 60), linewidth=1, style=plot.style_circles)
plot(bb58_lower, "BB58 Lower", color=color.new(color.green, 60), linewidth=1, style=plot.style_circles)

plot(bb10_upper, "BB10 Upper", color=color.new(color.orange, 40), linewidth=2)
plot(bb10_middle, "BB10 Middle", color=color.new(color.purple, 40), linewidth=2)
plot(bb10_lower, "BB10 Lower", color=color.new(color.yellow, 40), linewidth=2)

// Mathematical Constants
plot(bb_golden, "BB Golden (φ-0.26)", color=color.yellow, linewidth=1, style=plot.style_stepline)
plot(bb_pi, "BB Pi (π-0.02)", color=color.purple, linewidth=1, style=plot.style_stepline)

// Signal shapes
plotshape(long_condition, "Long Signal", shape.triangleup, location.belowbar, 
          color=nuclear_signal ? color.lime : color.green, 
          size=nuclear_signal ? size.large : size.normal)
plotshape(short_condition, "Short Signal", shape.triangledown, location.abovebar, 
          color=nuclear_signal ? color.fuchsia : color.red, 
          size=nuclear_signal ? size.large : size.normal)

// Nuclear signal diamond
plotshape(nuclear_signal and (long_condition or short_condition), "Nuclear Signal", 
          shape.diamond, location.absolute, color=color.yellow, size=size.huge)

// Background
bgcolor(long_condition ? color.new(color.green, 95) : 
        short_condition ? color.new(color.red, 95) : na)

// === INFORMATION TABLE ===
var table info_table = table.new(position.top_right, 3, 12, bgcolor=color.new(color.black, 80), border_width=1)

if barstate.islast
    table.cell(info_table, 0, 0, "COMPLETE SYSTEM", text_color=color.white, text_size=size.small)
    table.cell(info_table, 1, 0, "STATUS", text_color=color.white, text_size=size.small)
    table.cell(info_table, 2, 0, "VALUE", text_color=color.white, text_size=size.small)
    
    // Confluence Score
    table.cell(info_table, 0, 1, "Confluence", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 1, str.tostring(confluence_score) + "/10", 
               text_color=confluence_score >= 8 ? color.yellow : confluence_score >= 6 ? color.green : color.gray, text_size=size.tiny)
    table.cell(info_table, 2, 1, confluence_score >= 8 ? "NUCLEAR" : confluence_score >= 6 ? "GOOD" : "LOW", 
               text_color=confluence_score >= 8 ? color.yellow : confluence_score >= 6 ? color.green : color.gray, text_size=size.tiny)
    
    // Divergence Status
    div_status = bullish_divergence ? "BULLISH" : bearish_divergence ? "BEARISH" : "NONE"
    div_color = bullish_divergence ? color.green : bearish_divergence ? color.red : color.gray
    table.cell(info_table, 0, 2, "Divergence", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 2, div_status, text_color=div_color, text_size=size.tiny)
    
    // Fibonacci Status
    table.cell(info_table, 0, 3, "Fibonacci", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 3, fib_confluence ? "CONFLUENCE" : "NORMAL", 
               text_color=fib_confluence ? color.orange : color.gray, text_size=size.tiny)
    
    // BB Status
    table.cell(info_table, 0, 4, "Bollinger", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 4, bb_confluence ? "EXTREME" : bb_middle_proximity ? "MIDDLE" : "NORMAL", 
               text_color=bb_confluence ? color.red : bb_middle_proximity ? color.blue : color.gray, text_size=size.tiny)
    
    // Math Constants
    table.cell(info_table, 0, 5, "Math Constants", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 5, math_confluence ? "CONFLUENCE" : "NORMAL", 
               text_color=math_confluence ? color.purple : color.gray, text_size=size.tiny)
    
    // Current Targets
    current_target = bullish_divergence ? bullish_target : bearish_divergence ? bearish_target : close
    table.cell(info_table, 0, 6, "Target", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 6, "$" + str.tostring(current_target, "#.2"), text_color=div_color, text_size=size.tiny)
    
    // Strategy Performance
    total_trades = strategy.closed_trades
    win_rate = total_trades > 0 ? strategy.won_trades / total_trades * 100 : 0
    table.cell(info_table, 0, 7, "Win Rate", text_color=color.white, text_size=size.tiny)
    table.cell(info_table, 1, 7, str.tostring(win_rate, "#.1") + "%", 
               text_color=win_rate > 60 ? color.green : win_rate > 40 ? color.orange : color.red, text_size=size.tiny)

// === ALERTS ===
alertcondition(long_condition, title="Complete Long Signal", 
               message="🚀 COMPLETE LONG: Divergence+Fibonacci+BB Confluence " + str.tostring(confluence_score) + "/10")

alertcondition(short_condition, title="Complete Short Signal",
               message="🔻 COMPLETE SHORT: Divergence+Fibonacci+BB Confluence " + str.tostring(confluence_score) + "/10")

alertcondition(nuclear_signal and (long_condition or short_condition), title="NUCLEAR SIGNAL",
               message="💎 NUCLEAR CONFLUENCE SIGNAL: All systems aligned! Score: " + str.tostring(confluence_score) + "/10")
